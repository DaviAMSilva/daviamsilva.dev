(function(){if(!document.getElementById("background-container"))
return
const backgroundSketch=(s)=>{let squareSize=50;let squareBorder=15;let gridMargin=1;let maxSquareSize=4;let gridX,gridY;let animationFinished=false;let rectangles=[];let grid=[];const LEFT=[1,0,0,0];const RIGHT=[0,1,0,0];const UP=[0,0,1,0];const DOWN=[0,0,0,1];const DIRS=[LEFT,RIGHT,UP,DOWN];class Square{constructor(i,j,used){this.i=i;this.j=j;this.used=used||false;}}
class Rectangle{constructor(left,right,top,bottom){this.left=left;this.right=right;this.top=top;this.bottom=bottom;this.drawLeft=left;this.drawRight=right;this.drawTop=top;this.drawBottom=bottom;}
growDirection(dir){let[left,right,up,down]=dir;if((this.right-this.left+1)*(left+right)+(this.bottom-this.top+1)*(up+down)>=maxSquareSize){return false;}
this.left=this.left-left;this.right=this.right+right;this.top=this.top-up;this.bottom=this.bottom+down;return true;}
shrinkDirection(dir){let[left,right,up,down]=dir;this.left=this.left+left;this.right=this.right-right;this.top=this.top+up;this.bottom=this.bottom-down;}
smoothTransition(){this.drawLeft=this.drawLeft+(this.left-this.drawLeft)/5;this.drawRight=this.drawRight+(this.right-this.drawRight)/5;this.drawTop=this.drawTop+(this.top-this.drawTop)/5;this.drawBottom=this.drawBottom+(this.bottom-this.drawBottom)/5;}}
function createValidRectangle(){let possibleSquares=[];for(let column of grid){for(let square of column){if(!square.used){possibleSquares.push(square);}}}
if(possibleSquares.length===0){return null;}
let resultSquare=possibleSquares[s.floor(s.random()*possibleSquares.length)];return new Rectangle(resultSquare.i,resultSquare.i,resultSquare.j,resultSquare.j);}
function tryGrowRectangle(rectangle,dir){if(!rectangle.growDirection(dir)){return false;}
if(rectangle.left<0||rectangle.right>=gridX||rectangle.top<0||rectangle.bottom>=gridY){rectangle.shrinkDirection(dir);return false;}
for(let other of rectangles){if(rectangle===other){continue;}
if(rectangle.left<=other.right&&rectangle.right>=other.left&&rectangle.top<=other.bottom&&rectangle.bottom>=other.top){rectangle.shrinkDirection(dir);return false;}}
return true;}
function drawRectangles(){for(let rectangle of rectangles){let distToMouse=0;let border=0;rectangle.smoothTransition();s.fill(s.lerpColor(s.color(0,0,100),s.color(25,25,255),s.map((rectangle.drawRight-rectangle.drawLeft+1)/(rectangle.drawBottom-rectangle.drawTop+1),1/maxSquareSize,maxSquareSize,0,1)));s.noStroke();distToMouse=s.dist(s.mouseX,s.mouseY,rectangle.left*squareSize+squareSize/2,rectangle.top*squareSize+squareSize/2);border=squareBorder*s.max(s.noise(rectangle.drawLeft/25,rectangle.drawTop/25,s.frameCount/100),s.map(distToMouse,0,s.max(s.width/2,s.height/2),0.6,0,true));s.rect((rectangle.drawLeft-gridMargin)*squareSize+border,(rectangle.drawTop-gridMargin)*squareSize+border,(rectangle.drawRight-rectangle.drawLeft+1)*squareSize-border*2,(rectangle.drawBottom-rectangle.drawTop+1)*squareSize-border*2);}}
s.configureSketch=()=>{s.resizeCanvas(window.outerWidth,window.outerHeight);rectangles=[];grid=[];animationFinished=false
gridX=s.ceil((s.width+gridMargin*squareSize*2)/squareSize);gridY=s.ceil((s.height+gridMargin*squareSize*2)/squareSize);grid=[];for(let i=0;i<gridX;i++){grid[i]=[];for(let j=0;j<gridY;j++){grid[i][j]=new Square(i,j,false);}}
let ii=2+s.floor(s.random(2));let jj=3+s.floor(s.random(2));rectangles.push(new Rectangle(ii,ii+maxSquareSize-1,jj,jj+maxSquareSize-1));}
s.setup=()=>{s.createCanvas(s.windowWidth,s.windowHeight);s.background(10,10,20);s.noiseDetail(2,0.5);s.describe("Plano de fundo futurista com retângulos azuis e uma imagem de uma lâmpada");s.configureSketch();}
s.draw=()=>{s.background(10,10,20);drawRectangles();if(animationFinished)
return;let currentRectangle=rectangles[rectangles.length-1];if(currentRectangle){tryGrowRectangle(currentRectangle,DIRS[s.floor(s.random()*DIRS.length)]);tryGrowRectangle(currentRectangle,DIRS[s.floor(s.random()*DIRS.length)]);let ableToGrow=tryGrowRectangle(currentRectangle,DIRS[s.floor(s.random()*DIRS.length)]);if(!ableToGrow){for(let i=currentRectangle.left;i<=currentRectangle.right;i++){for(let j=currentRectangle.top;j<=currentRectangle.bottom;j++){if(grid[i]&&grid[i][j])
grid[i][j].used=true;}}
let newRectangle=createValidRectangle();if(newRectangle===null){animationFinished=true;return;}
rectangles.push(newRectangle);}}}
window.addEventListener("resize",()=>{s.configureSketch();});}
let myp5=new p5(backgroundSketch,document.getElementById('background-container'));})()