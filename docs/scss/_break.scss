// Arquivos de origems dispon√≠veis em:
// https://github.com/squidfunk/mkdocs-material/blob/master/src/templates/assets/stylesheets/_config.scss
// https://github.com/squidfunk/mkdocs-material/blob/master/src/templates/assets/stylesheets/utilities/_break.scss
// https://github.com/squidfunk/mkdocs-material/blob/master/src/templates/assets/stylesheets/utilities/_convert.scss



////
/// Copyright (c) 2016-2024 Martin Donath <martin.donath@squidfunk.com>
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following conditions:
///
/// The above copyright notice and this permission notice shall be included in
/// all copies or substantial portions of the Software.
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
/// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS
////



@use "sass:list";
@use "sass:map";
@use "sass:math";



// ----------------------------------------------------------------------------
// Helpers
// ----------------------------------------------------------------------------

///
/// Strip units from a number
///
@function strip-units($number) {
  @return math.div($number, ($number * 0 + 1));
}

///
/// Convert color in HEX to HSL
///
/// Note, that we need to strip the `deg` units from the `hue` value, as they
/// were added in Color Level 4, which not all browsers support.
///
@function hex2hsl($color) {
  @return
    round(strip-units(hue($color))),
    round(saturation($color)),
    round(lightness($color));
}

// ----------------------------------------------------------------------------

///
/// Convert font size in px to em
///
@function px2em($size, $base: 16px) {
  @if unit($size) == px {
    @if unit($base) == px {
      @return math.div($size, $base) * 1em;
    } @else {
      @error "Invalid base: #{$base} - unit must be 'px'";
    }
  } @else {
    @error "Invalid size: #{$size} - unit must be 'px'";
  }
}

///
/// Convert font size in px to rem
///
@function px2rem($size, $base: 20px) {
  @if unit($size) == px {
    @if unit($base) == px {
      @return math.div($size, $base) * 1rem;
    } @else {
      @error "Invalid base: #{$base} - unit must be 'px'";
    }
  } @else {
    @error "Invalid size: #{$size} - unit must be 'px'";
  }
}



// ----------------------------------------------------------------------------
// Variables: breakpoints
// ----------------------------------------------------------------------------

// Device-specific breakpoints
$break-devices: (
  mobile: (
    portrait:  px2em(220px)  px2em(479.75px),
    landscape: px2em(480px)  px2em(719.75px)
  ),
  tablet: (
    portrait:  px2em(720px)  px2em(959.75px),
    landscape: px2em(960px)  px2em(1219.75px)
  ),
  screen: (
    small:     px2em(1220px) px2em(1599.75px),
    medium:    px2em(1600px) px2em(1999.75px),
    large:     px2em(2000px)
  )
);



// ----------------------------------------------------------------------------
// Helpers
// ----------------------------------------------------------------------------

///
/// Choose minimum and maximum device widths
///
@function break-select-min-max($devices) {
  $min: 1000000;
  $max: 0;
  @each $key, $value in $devices {
    @while type-of($value) == map {
      $value: break-select-min-max($value);
    }
    @if type-of($value) == list {
      @each $number in $value {
        @if type-of($number) == number {
          $min: math.min($number, $min);
          @if $max {
            $max: math.max($number, $max);
          }
        } @else {
          @error "Invalid number: #{$number}";
        }
      }
    } @else if type-of($value) == number {
      $min: math.min($value, $min);
      $max: null;
    } @else {
      @error "Invalid value: #{$value}";
    }
  }
  @return $min, $max;
}

///
/// Select minimum and maximum widths for a device breakpoint
///
@function break-select-device($device) {
  $current: $break-devices;
  @for $n from 1 through length($device) {
    @if type-of($current) == map {
      $current: map.get($current, list.nth($device, $n));
    } @else {
      @error "Invalid device map: #{$devices}";
    }
  }
  @if type-of($current) == list or type-of($current) == number {
    $current: (default: $current);
  }
  @return break-select-min-max($current);
}

// ----------------------------------------------------------------------------
// Mixins
// ----------------------------------------------------------------------------

///
/// A minimum-maximum media query breakpoint
///
@mixin break-at($breakpoint) {
  @if type-of($breakpoint) == number {
    @media screen and (min-width: $breakpoint) {
      @content;
    }
  } @else if type-of($breakpoint) == list {
    $min: list.nth($breakpoint, 1);
    $max: list.nth($breakpoint, 2);
    @if type-of($min) == number and type-of($max) == number {
      @media screen and (min-width: $min) and (max-width: $max) {
        @content;
      }
    } @else {
      @error "Invalid breakpoint: #{$breakpoint}";
    }
  } @else {
    @error "Invalid breakpoint: #{$breakpoint}";
  }
}

///
/// An orientation media query breakpoint
///
@mixin break-at-orientation($breakpoint) {
  @if type-of($breakpoint) == string {
    @media screen and (orientation: $breakpoint) {
      @content;
    }
  } @else {
    @error "Invalid breakpoint: #{$breakpoint}";
  }
}

///
/// A maximum-aspect-ratio media query breakpoint
///
@mixin break-at-ratio($breakpoint) {
  @if type-of($breakpoint) == number {
    @media screen and (max-aspect-ratio: $breakpoint) {
      @content;
    }
  } @else {
    @error "Invalid breakpoint: #{$breakpoint}";
  }
}

///
/// A minimum-maximum media query device breakpoint
///
@mixin break-at-device($device) {
  @if type-of($device) == string {
    $device: $device,;
  }
  @if type-of($device) == list {
    $breakpoint: break-select-device($device);
    @if list.nth($breakpoint, 2) {
      $min: list.nth($breakpoint, 1);
      $max: list.nth($breakpoint, 2);

      @media screen and (min-width: $min) and (max-width: $max) {
        @content;
      }
    } @else {
      @error "Invalid device: #{$device}";
    }
  } @else {
    @error "Invalid device: #{$device}";
  }
}

///
/// A minimum media query device breakpoint
///
@mixin break-from-device($device) {
  @if type-of($device) == string {
    $device: $device,;
  }
  @if type-of($device) == list {
    $breakpoint: break-select-device($device);
    $min: list.nth($breakpoint, 1);

    @media screen and (min-width: $min) {
      @content;
    }
  } @else {
    @error "Invalid device: #{$device}";
  }
}

///
/// A maximum media query device breakpoint
///
@mixin break-to-device($device) {
  @if type-of($device) == string {
    $device: $device,;
  }
  @if type-of($device) == list {
    $breakpoint: break-select-device($device);
    $max: list.nth($breakpoint, 2);

    @media screen and (max-width: $max) {
      @content;
    }
  } @else {
    @error "Invalid device: #{$device}";
  }
}